<<<<<<< HEAD
// Code generated from CESQLParser.g4 by ANTLR 4.10.1. DO NOT EDIT.
=======
/*
 Copyright 2021 The CloudEvents Authors
 SPDX-License-Identifier: Apache-2.0
*/

// Code generated from CESQLParser.g4 by ANTLR 4.9.3. DO NOT EDIT.
>>>>>>> bcb75b3 (wip: feat: supports data in sql)

package gen

import (
	"fmt"
	"sync"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

<<<<<<< HEAD
=======
var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 36, 254,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4,
	39, 9, 39, 4, 40, 9, 40, 4, 41, 9, 41, 3, 2, 6, 2, 85, 10, 2, 13, 2, 14,
	2, 86, 3, 2, 3, 2, 3, 3, 6, 3, 92, 10, 3, 13, 3, 14, 3, 93, 3, 4, 3, 4,
	3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 102, 10, 4, 12, 4, 14, 4, 105, 11, 4, 3,
	4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 115, 10, 5, 12, 5, 14,
	5, 118, 11, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 7, 7, 126, 10, 7, 12,
	7, 14, 7, 129, 11, 7, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3, 11,
	3, 12, 3, 12, 3, 13, 3, 13, 5, 13, 143, 10, 13, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 17, 3, 17,
	3, 17, 3, 18, 3, 18, 3, 19, 3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 22, 3,
	22, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26,
	3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3,
	30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32,
	3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 3, 34, 3,
	34, 3, 34, 3, 34, 3, 35, 3, 35, 3, 36, 3, 36, 3, 37, 6, 37, 219, 10, 37,
	13, 37, 14, 37, 220, 3, 38, 6, 38, 224, 10, 38, 13, 38, 14, 38, 225, 3,
	39, 6, 39, 229, 10, 39, 13, 39, 14, 39, 230, 3, 40, 3, 40, 3, 40, 3, 40,
	3, 40, 3, 40, 3, 40, 6, 40, 240, 10, 40, 13, 40, 14, 40, 241, 6, 40, 244,
	10, 40, 13, 40, 14, 40, 245, 3, 41, 3, 41, 7, 41, 250, 10, 41, 12, 41,
	14, 41, 253, 11, 41, 2, 2, 42, 3, 3, 5, 2, 7, 2, 9, 2, 11, 2, 13, 2, 15,
	4, 17, 5, 19, 6, 21, 7, 23, 8, 25, 2, 27, 9, 29, 10, 31, 11, 33, 12, 35,
	13, 37, 14, 39, 15, 41, 16, 43, 17, 45, 18, 47, 19, 49, 20, 51, 21, 53,
	22, 55, 23, 57, 24, 59, 25, 61, 26, 63, 27, 65, 28, 67, 29, 69, 30, 71,
	31, 73, 32, 75, 33, 77, 34, 79, 35, 81, 36, 3, 2, 11, 5, 2, 11, 12, 15,
	15, 34, 34, 5, 2, 50, 59, 67, 92, 99, 124, 4, 2, 36, 36, 94, 94, 4, 2,
	41, 41, 94, 94, 3, 2, 50, 59, 3, 2, 67, 92, 4, 2, 67, 92, 97, 97, 4, 2,
	67, 92, 99, 124, 7, 2, 47, 47, 50, 59, 67, 92, 97, 97, 99, 124, 2, 263,
	2, 3, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2,
	2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2,
	2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3,
	2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45,
	3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2,
	53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59, 3, 2, 2, 2,
	2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2, 67, 3, 2, 2,
	2, 2, 69, 3, 2, 2, 2, 2, 71, 3, 2, 2, 2, 2, 73, 3, 2, 2, 2, 2, 75, 3, 2,
	2, 2, 2, 77, 3, 2, 2, 2, 2, 79, 3, 2, 2, 2, 2, 81, 3, 2, 2, 2, 3, 84, 3,
	2, 2, 2, 5, 91, 3, 2, 2, 2, 7, 95, 3, 2, 2, 2, 9, 108, 3, 2, 2, 2, 11,
	121, 3, 2, 2, 2, 13, 123, 3, 2, 2, 2, 15, 130, 3, 2, 2, 2, 17, 132, 3,
	2, 2, 2, 19, 134, 3, 2, 2, 2, 21, 136, 3, 2, 2, 2, 23, 138, 3, 2, 2, 2,
	25, 142, 3, 2, 2, 2, 27, 144, 3, 2, 2, 2, 29, 148, 3, 2, 2, 2, 31, 151,
	3, 2, 2, 2, 33, 155, 3, 2, 2, 2, 35, 159, 3, 2, 2, 2, 37, 161, 3, 2, 2,
	2, 39, 163, 3, 2, 2, 2, 41, 165, 3, 2, 2, 2, 43, 167, 3, 2, 2, 2, 45, 169,
	3, 2, 2, 2, 47, 171, 3, 2, 2, 2, 49, 174, 3, 2, 2, 2, 51, 176, 3, 2, 2,
	2, 53, 179, 3, 2, 2, 2, 55, 181, 3, 2, 2, 2, 57, 184, 3, 2, 2, 2, 59, 187,
	3, 2, 2, 2, 61, 192, 3, 2, 2, 2, 63, 199, 3, 2, 2, 2, 65, 202, 3, 2, 2,
	2, 67, 207, 3, 2, 2, 2, 69, 213, 3, 2, 2, 2, 71, 215, 3, 2, 2, 2, 73, 218,
	3, 2, 2, 2, 75, 223, 3, 2, 2, 2, 77, 228, 3, 2, 2, 2, 79, 232, 3, 2, 2,
	2, 81, 247, 3, 2, 2, 2, 83, 85, 9, 2, 2, 2, 84, 83, 3, 2, 2, 2, 85, 86,
	3, 2, 2, 2, 86, 84, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 88, 3, 2, 2, 2,
	88, 89, 8, 2, 2, 2, 89, 4, 3, 2, 2, 2, 90, 92, 9, 3, 2, 2, 91, 90, 3, 2,
	2, 2, 92, 93, 3, 2, 2, 2, 93, 91, 3, 2, 2, 2, 93, 94, 3, 2, 2, 2, 94, 6,
	3, 2, 2, 2, 95, 103, 7, 36, 2, 2, 96, 97, 7, 94, 2, 2, 97, 102, 11, 2,
	2, 2, 98, 99, 7, 36, 2, 2, 99, 102, 7, 36, 2, 2, 100, 102, 10, 4, 2, 2,
	101, 96, 3, 2, 2, 2, 101, 98, 3, 2, 2, 2, 101, 100, 3, 2, 2, 2, 102, 105,
	3, 2, 2, 2, 103, 101, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 104, 106, 3, 2,
	2, 2, 105, 103, 3, 2, 2, 2, 106, 107, 7, 36, 2, 2, 107, 8, 3, 2, 2, 2,
	108, 116, 7, 41, 2, 2, 109, 110, 7, 94, 2, 2, 110, 115, 11, 2, 2, 2, 111,
	112, 7, 41, 2, 2, 112, 115, 7, 41, 2, 2, 113, 115, 10, 5, 2, 2, 114, 109,
	3, 2, 2, 2, 114, 111, 3, 2, 2, 2, 114, 113, 3, 2, 2, 2, 115, 118, 3, 2,
	2, 2, 116, 114, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 117, 119, 3, 2, 2, 2,
	118, 116, 3, 2, 2, 2, 119, 120, 7, 41, 2, 2, 120, 10, 3, 2, 2, 2, 121,
	122, 9, 6, 2, 2, 122, 12, 3, 2, 2, 2, 123, 127, 9, 7, 2, 2, 124, 126, 9,
	8, 2, 2, 125, 124, 3, 2, 2, 2, 126, 129, 3, 2, 2, 2, 127, 125, 3, 2, 2,
	2, 127, 128, 3, 2, 2, 2, 128, 14, 3, 2, 2, 2, 129, 127, 3, 2, 2, 2, 130,
	131, 7, 42, 2, 2, 131, 16, 3, 2, 2, 2, 132, 133, 7, 43, 2, 2, 133, 18,
	3, 2, 2, 2, 134, 135, 7, 46, 2, 2, 135, 20, 3, 2, 2, 2, 136, 137, 7, 41,
	2, 2, 137, 22, 3, 2, 2, 2, 138, 139, 7, 36, 2, 2, 139, 24, 3, 2, 2, 2,
	140, 143, 5, 21, 11, 2, 141, 143, 5, 23, 12, 2, 142, 140, 3, 2, 2, 2, 142,
	141, 3, 2, 2, 2, 143, 26, 3, 2, 2, 2, 144, 145, 7, 67, 2, 2, 145, 146,
	7, 80, 2, 2, 146, 147, 7, 70, 2, 2, 147, 28, 3, 2, 2, 2, 148, 149, 7, 81,
	2, 2, 149, 150, 7, 84, 2, 2, 150, 30, 3, 2, 2, 2, 151, 152, 7, 90, 2, 2,
	152, 153, 7, 81, 2, 2, 153, 154, 7, 84, 2, 2, 154, 32, 3, 2, 2, 2, 155,
	156, 7, 80, 2, 2, 156, 157, 7, 81, 2, 2, 157, 158, 7, 86, 2, 2, 158, 34,
	3, 2, 2, 2, 159, 160, 7, 44, 2, 2, 160, 36, 3, 2, 2, 2, 161, 162, 7, 49,
	2, 2, 162, 38, 3, 2, 2, 2, 163, 164, 7, 39, 2, 2, 164, 40, 3, 2, 2, 2,
	165, 166, 7, 45, 2, 2, 166, 42, 3, 2, 2, 2, 167, 168, 7, 47, 2, 2, 168,
	44, 3, 2, 2, 2, 169, 170, 7, 63, 2, 2, 170, 46, 3, 2, 2, 2, 171, 172, 7,
	35, 2, 2, 172, 173, 7, 63, 2, 2, 173, 48, 3, 2, 2, 2, 174, 175, 7, 64,
	2, 2, 175, 50, 3, 2, 2, 2, 176, 177, 7, 64, 2, 2, 177, 178, 7, 63, 2, 2,
	178, 52, 3, 2, 2, 2, 179, 180, 7, 62, 2, 2, 180, 54, 3, 2, 2, 2, 181, 182,
	7, 62, 2, 2, 182, 183, 7, 64, 2, 2, 183, 56, 3, 2, 2, 2, 184, 185, 7, 62,
	2, 2, 185, 186, 7, 63, 2, 2, 186, 58, 3, 2, 2, 2, 187, 188, 7, 78, 2, 2,
	188, 189, 7, 75, 2, 2, 189, 190, 7, 77, 2, 2, 190, 191, 7, 71, 2, 2, 191,
	60, 3, 2, 2, 2, 192, 193, 7, 71, 2, 2, 193, 194, 7, 90, 2, 2, 194, 195,
	7, 75, 2, 2, 195, 196, 7, 85, 2, 2, 196, 197, 7, 86, 2, 2, 197, 198, 7,
	85, 2, 2, 198, 62, 3, 2, 2, 2, 199, 200, 7, 75, 2, 2, 200, 201, 7, 80,
	2, 2, 201, 64, 3, 2, 2, 2, 202, 203, 7, 86, 2, 2, 203, 204, 7, 84, 2, 2,
	204, 205, 7, 87, 2, 2, 205, 206, 7, 71, 2, 2, 206, 66, 3, 2, 2, 2, 207,
	208, 7, 72, 2, 2, 208, 209, 7, 67, 2, 2, 209, 210, 7, 78, 2, 2, 210, 211,
	7, 85, 2, 2, 211, 212, 7, 71, 2, 2, 212, 68, 3, 2, 2, 2, 213, 214, 5, 7,
	4, 2, 214, 70, 3, 2, 2, 2, 215, 216, 5, 9, 5, 2, 216, 72, 3, 2, 2, 2, 217,
	219, 5, 11, 6, 2, 218, 217, 3, 2, 2, 2, 219, 220, 3, 2, 2, 2, 220, 218,
	3, 2, 2, 2, 220, 221, 3, 2, 2, 2, 221, 74, 3, 2, 2, 2, 222, 224, 9, 9,
	2, 2, 223, 222, 3, 2, 2, 2, 224, 225, 3, 2, 2, 2, 225, 223, 3, 2, 2, 2,
	225, 226, 3, 2, 2, 2, 226, 76, 3, 2, 2, 2, 227, 229, 9, 3, 2, 2, 228, 227,
	3, 2, 2, 2, 229, 230, 3, 2, 2, 2, 230, 228, 3, 2, 2, 2, 230, 231, 3, 2,
	2, 2, 231, 78, 3, 2, 2, 2, 232, 233, 7, 70, 2, 2, 233, 234, 7, 67, 2, 2,
	234, 235, 7, 86, 2, 2, 235, 236, 7, 67, 2, 2, 236, 243, 3, 2, 2, 2, 237,
	239, 7, 48, 2, 2, 238, 240, 9, 10, 2, 2, 239, 238, 3, 2, 2, 2, 240, 241,
	3, 2, 2, 2, 241, 239, 3, 2, 2, 2, 241, 242, 3, 2, 2, 2, 242, 244, 3, 2,
	2, 2, 243, 237, 3, 2, 2, 2, 244, 245, 3, 2, 2, 2, 245, 243, 3, 2, 2, 2,
	245, 246, 3, 2, 2, 2, 246, 80, 3, 2, 2, 2, 247, 251, 9, 7, 2, 2, 248, 250,
	9, 8, 2, 2, 249, 248, 3, 2, 2, 2, 250, 253, 3, 2, 2, 2, 251, 249, 3, 2,
	2, 2, 251, 252, 3, 2, 2, 2, 252, 82, 3, 2, 2, 2, 253, 251, 3, 2, 2, 2,
	17, 2, 86, 93, 101, 103, 114, 116, 127, 142, 220, 225, 230, 241, 245, 251,
	3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "", "'('", "')'", "','", "'''", "'\"'", "'AND'", "'OR'", "'XOR'", "'NOT'",
	"'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", "'>'", "'>='", "'<'",
	"'<>'", "'<='", "'LIKE'", "'EXISTS'", "'IN'", "'TRUE'", "'FALSE'",
}

var lexerSymbolicNames = []string{
	"", "SPACE", "LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB",
	"DOUBLE_QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR", "DIVIDE", "MODULE",
	"PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "GREATER", "GREATER_OR_EQUAL", "LESS",
	"LESS_GREATER", "LESS_OR_EQUAL", "LIKE", "EXISTS", "IN", "TRUE", "FALSE",
	"DQUOTED_STRING_LITERAL", "SQUOTED_STRING_LITERAL", "INTEGER_LITERAL",
	"IDENTIFIER", "IDENTIFIER_WITH_NUMBER", "DATA_IDENTIFIER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
}

var lexerRuleNames = []string{
	"SPACE", "ID_LITERAL", "DQUOTA_STRING", "SQUOTA_STRING", "INT_DIGIT", "FN_LITERAL",
	"LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
	"QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR", "DIVIDE", "MODULE", "PLUS",
	"MINUS", "EQUAL", "NOT_EQUAL", "GREATER", "GREATER_OR_EQUAL", "LESS", "LESS_GREATER",
	"LESS_OR_EQUAL", "LIKE", "EXISTS", "IN", "TRUE", "FALSE", "DQUOTED_STRING_LITERAL",
	"SQUOTED_STRING_LITERAL", "INTEGER_LITERAL", "IDENTIFIER", "IDENTIFIER_WITH_NUMBER",
	"DATA_IDENTIFIER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
}

>>>>>>> bcb75b3 (wip: feat: supports data in sql)
type CESQLParserLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var cesqlparserlexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	channelNames           []string
	modeNames              []string
	literalNames           []string
	symbolicNames          []string
	ruleNames              []string
	predictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func cesqlparserlexerLexerInit() {
	staticData := &cesqlparserlexerLexerStaticData
	staticData.channelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.modeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.literalNames = []string{
		"", "", "'('", "')'", "','", "'''", "'\"'", "'AND'", "'OR'", "'XOR'",
		"'NOT'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", "'>'", "'>='",
		"'<'", "'<>'", "'<='", "'LIKE'", "'EXISTS'", "'IN'", "'TRUE'", "'FALSE'",
	}
	staticData.symbolicNames = []string{
		"", "SPACE", "LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB",
		"DOUBLE_QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR", "DIVIDE", "MODULE",
		"PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "GREATER", "GREATER_OR_EQUAL",
		"LESS", "LESS_GREATER", "LESS_OR_EQUAL", "LIKE", "EXISTS", "IN", "TRUE",
		"FALSE", "DQUOTED_STRING_LITERAL", "SQUOTED_STRING_LITERAL", "INTEGER_LITERAL",
		"IDENTIFIER", "IDENTIFIER_WITH_NUMBER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
	}
	staticData.ruleNames = []string{
		"SPACE", "ID_LITERAL", "DQUOTA_STRING", "SQUOTA_STRING", "INT_DIGIT",
		"FN_LITERAL", "LR_BRACKET", "RR_BRACKET", "COMMA", "SINGLE_QUOTE_SYMB",
		"DOUBLE_QUOTE_SYMB", "QUOTE_SYMB", "AND", "OR", "XOR", "NOT", "STAR",
		"DIVIDE", "MODULE", "PLUS", "MINUS", "EQUAL", "NOT_EQUAL", "GREATER",
		"GREATER_OR_EQUAL", "LESS", "LESS_GREATER", "LESS_OR_EQUAL", "LIKE",
		"EXISTS", "IN", "TRUE", "FALSE", "DQUOTED_STRING_LITERAL", "SQUOTED_STRING_LITERAL",
		"INTEGER_LITERAL", "IDENTIFIER", "IDENTIFIER_WITH_NUMBER", "FUNCTION_IDENTIFIER_WITH_UNDERSCORE",
	}
	staticData.predictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 33, 235, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 1, 0, 4, 0, 81, 8, 0, 11, 0, 12, 0,
		82, 1, 0, 1, 0, 1, 1, 4, 1, 88, 8, 1, 11, 1, 12, 1, 89, 1, 2, 1, 2, 1,
		2, 1, 2, 1, 2, 1, 2, 5, 2, 98, 8, 2, 10, 2, 12, 2, 101, 9, 2, 1, 2, 1,
		2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 111, 8, 3, 10, 3, 12, 3, 114,
		9, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 5, 1, 5, 5, 5, 122, 8, 5, 10, 5, 12, 5,
		125, 9, 5, 1, 6, 1, 6, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10,
		1, 11, 1, 11, 3, 11, 139, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 13, 1,
		13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16,
		1, 16, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1,
		21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25,
		1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1,
		28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30,
		1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1,
		32, 1, 33, 1, 33, 1, 34, 1, 34, 1, 35, 4, 35, 215, 8, 35, 11, 35, 12, 35,
		216, 1, 36, 4, 36, 220, 8, 36, 11, 36, 12, 36, 221, 1, 37, 4, 37, 225,
		8, 37, 11, 37, 12, 37, 226, 1, 38, 1, 38, 5, 38, 231, 8, 38, 10, 38, 12,
		38, 234, 9, 38, 0, 0, 39, 1, 1, 3, 0, 5, 0, 7, 0, 9, 0, 11, 0, 13, 2, 15,
		3, 17, 4, 19, 5, 21, 6, 23, 0, 25, 7, 27, 8, 29, 9, 31, 10, 33, 11, 35,
		12, 37, 13, 39, 14, 41, 15, 43, 16, 45, 17, 47, 18, 49, 19, 51, 20, 53,
		21, 55, 22, 57, 23, 59, 24, 61, 25, 63, 26, 65, 27, 67, 28, 69, 29, 71,
		30, 73, 31, 75, 32, 77, 33, 1, 0, 8, 3, 0, 9, 10, 13, 13, 32, 32, 3, 0,
		48, 57, 65, 90, 97, 122, 2, 0, 34, 34, 92, 92, 2, 0, 39, 39, 92, 92, 1,
		0, 48, 57, 1, 0, 65, 90, 2, 0, 65, 90, 95, 95, 2, 0, 65, 90, 97, 122, 242,
		0, 1, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0,
		0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0,
		0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1,
		0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43,
		1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0,
		51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0,
		0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0,
		0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0,
		0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 1, 80, 1, 0, 0, 0, 3, 87, 1,
		0, 0, 0, 5, 91, 1, 0, 0, 0, 7, 104, 1, 0, 0, 0, 9, 117, 1, 0, 0, 0, 11,
		119, 1, 0, 0, 0, 13, 126, 1, 0, 0, 0, 15, 128, 1, 0, 0, 0, 17, 130, 1,
		0, 0, 0, 19, 132, 1, 0, 0, 0, 21, 134, 1, 0, 0, 0, 23, 138, 1, 0, 0, 0,
		25, 140, 1, 0, 0, 0, 27, 144, 1, 0, 0, 0, 29, 147, 1, 0, 0, 0, 31, 151,
		1, 0, 0, 0, 33, 155, 1, 0, 0, 0, 35, 157, 1, 0, 0, 0, 37, 159, 1, 0, 0,
		0, 39, 161, 1, 0, 0, 0, 41, 163, 1, 0, 0, 0, 43, 165, 1, 0, 0, 0, 45, 167,
		1, 0, 0, 0, 47, 170, 1, 0, 0, 0, 49, 172, 1, 0, 0, 0, 51, 175, 1, 0, 0,
		0, 53, 177, 1, 0, 0, 0, 55, 180, 1, 0, 0, 0, 57, 183, 1, 0, 0, 0, 59, 188,
		1, 0, 0, 0, 61, 195, 1, 0, 0, 0, 63, 198, 1, 0, 0, 0, 65, 203, 1, 0, 0,
		0, 67, 209, 1, 0, 0, 0, 69, 211, 1, 0, 0, 0, 71, 214, 1, 0, 0, 0, 73, 219,
		1, 0, 0, 0, 75, 224, 1, 0, 0, 0, 77, 228, 1, 0, 0, 0, 79, 81, 7, 0, 0,
		0, 80, 79, 1, 0, 0, 0, 81, 82, 1, 0, 0, 0, 82, 80, 1, 0, 0, 0, 82, 83,
		1, 0, 0, 0, 83, 84, 1, 0, 0, 0, 84, 85, 6, 0, 0, 0, 85, 2, 1, 0, 0, 0,
		86, 88, 7, 1, 0, 0, 87, 86, 1, 0, 0, 0, 88, 89, 1, 0, 0, 0, 89, 87, 1,
		0, 0, 0, 89, 90, 1, 0, 0, 0, 90, 4, 1, 0, 0, 0, 91, 99, 5, 34, 0, 0, 92,
		93, 5, 92, 0, 0, 93, 98, 9, 0, 0, 0, 94, 95, 5, 34, 0, 0, 95, 98, 5, 34,
		0, 0, 96, 98, 8, 2, 0, 0, 97, 92, 1, 0, 0, 0, 97, 94, 1, 0, 0, 0, 97, 96,
		1, 0, 0, 0, 98, 101, 1, 0, 0, 0, 99, 97, 1, 0, 0, 0, 99, 100, 1, 0, 0,
		0, 100, 102, 1, 0, 0, 0, 101, 99, 1, 0, 0, 0, 102, 103, 5, 34, 0, 0, 103,
		6, 1, 0, 0, 0, 104, 112, 5, 39, 0, 0, 105, 106, 5, 92, 0, 0, 106, 111,
		9, 0, 0, 0, 107, 108, 5, 39, 0, 0, 108, 111, 5, 39, 0, 0, 109, 111, 8,
		3, 0, 0, 110, 105, 1, 0, 0, 0, 110, 107, 1, 0, 0, 0, 110, 109, 1, 0, 0,
		0, 111, 114, 1, 0, 0, 0, 112, 110, 1, 0, 0, 0, 112, 113, 1, 0, 0, 0, 113,
		115, 1, 0, 0, 0, 114, 112, 1, 0, 0, 0, 115, 116, 5, 39, 0, 0, 116, 8, 1,
		0, 0, 0, 117, 118, 7, 4, 0, 0, 118, 10, 1, 0, 0, 0, 119, 123, 7, 5, 0,
		0, 120, 122, 7, 6, 0, 0, 121, 120, 1, 0, 0, 0, 122, 125, 1, 0, 0, 0, 123,
		121, 1, 0, 0, 0, 123, 124, 1, 0, 0, 0, 124, 12, 1, 0, 0, 0, 125, 123, 1,
		0, 0, 0, 126, 127, 5, 40, 0, 0, 127, 14, 1, 0, 0, 0, 128, 129, 5, 41, 0,
		0, 129, 16, 1, 0, 0, 0, 130, 131, 5, 44, 0, 0, 131, 18, 1, 0, 0, 0, 132,
		133, 5, 39, 0, 0, 133, 20, 1, 0, 0, 0, 134, 135, 5, 34, 0, 0, 135, 22,
		1, 0, 0, 0, 136, 139, 3, 19, 9, 0, 137, 139, 3, 21, 10, 0, 138, 136, 1,
		0, 0, 0, 138, 137, 1, 0, 0, 0, 139, 24, 1, 0, 0, 0, 140, 141, 5, 65, 0,
		0, 141, 142, 5, 78, 0, 0, 142, 143, 5, 68, 0, 0, 143, 26, 1, 0, 0, 0, 144,
		145, 5, 79, 0, 0, 145, 146, 5, 82, 0, 0, 146, 28, 1, 0, 0, 0, 147, 148,
		5, 88, 0, 0, 148, 149, 5, 79, 0, 0, 149, 150, 5, 82, 0, 0, 150, 30, 1,
		0, 0, 0, 151, 152, 5, 78, 0, 0, 152, 153, 5, 79, 0, 0, 153, 154, 5, 84,
		0, 0, 154, 32, 1, 0, 0, 0, 155, 156, 5, 42, 0, 0, 156, 34, 1, 0, 0, 0,
		157, 158, 5, 47, 0, 0, 158, 36, 1, 0, 0, 0, 159, 160, 5, 37, 0, 0, 160,
		38, 1, 0, 0, 0, 161, 162, 5, 43, 0, 0, 162, 40, 1, 0, 0, 0, 163, 164, 5,
		45, 0, 0, 164, 42, 1, 0, 0, 0, 165, 166, 5, 61, 0, 0, 166, 44, 1, 0, 0,
		0, 167, 168, 5, 33, 0, 0, 168, 169, 5, 61, 0, 0, 169, 46, 1, 0, 0, 0, 170,
		171, 5, 62, 0, 0, 171, 48, 1, 0, 0, 0, 172, 173, 5, 62, 0, 0, 173, 174,
		5, 61, 0, 0, 174, 50, 1, 0, 0, 0, 175, 176, 5, 60, 0, 0, 176, 52, 1, 0,
		0, 0, 177, 178, 5, 60, 0, 0, 178, 179, 5, 62, 0, 0, 179, 54, 1, 0, 0, 0,
		180, 181, 5, 60, 0, 0, 181, 182, 5, 61, 0, 0, 182, 56, 1, 0, 0, 0, 183,
		184, 5, 76, 0, 0, 184, 185, 5, 73, 0, 0, 185, 186, 5, 75, 0, 0, 186, 187,
		5, 69, 0, 0, 187, 58, 1, 0, 0, 0, 188, 189, 5, 69, 0, 0, 189, 190, 5, 88,
		0, 0, 190, 191, 5, 73, 0, 0, 191, 192, 5, 83, 0, 0, 192, 193, 5, 84, 0,
		0, 193, 194, 5, 83, 0, 0, 194, 60, 1, 0, 0, 0, 195, 196, 5, 73, 0, 0, 196,
		197, 5, 78, 0, 0, 197, 62, 1, 0, 0, 0, 198, 199, 5, 84, 0, 0, 199, 200,
		5, 82, 0, 0, 200, 201, 5, 85, 0, 0, 201, 202, 5, 69, 0, 0, 202, 64, 1,
		0, 0, 0, 203, 204, 5, 70, 0, 0, 204, 205, 5, 65, 0, 0, 205, 206, 5, 76,
		0, 0, 206, 207, 5, 83, 0, 0, 207, 208, 5, 69, 0, 0, 208, 66, 1, 0, 0, 0,
		209, 210, 3, 5, 2, 0, 210, 68, 1, 0, 0, 0, 211, 212, 3, 7, 3, 0, 212, 70,
		1, 0, 0, 0, 213, 215, 3, 9, 4, 0, 214, 213, 1, 0, 0, 0, 215, 216, 1, 0,
		0, 0, 216, 214, 1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 217, 72, 1, 0, 0, 0,
		218, 220, 7, 7, 0, 0, 219, 218, 1, 0, 0, 0, 220, 221, 1, 0, 0, 0, 221,
		219, 1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 74, 1, 0, 0, 0, 223, 225, 7,
		1, 0, 0, 224, 223, 1, 0, 0, 0, 225, 226, 1, 0, 0, 0, 226, 224, 1, 0, 0,
		0, 226, 227, 1, 0, 0, 0, 227, 76, 1, 0, 0, 0, 228, 232, 7, 5, 0, 0, 229,
		231, 7, 6, 0, 0, 230, 229, 1, 0, 0, 0, 231, 234, 1, 0, 0, 0, 232, 230,
		1, 0, 0, 0, 232, 233, 1, 0, 0, 0, 233, 78, 1, 0, 0, 0, 234, 232, 1, 0,
		0, 0, 13, 0, 82, 89, 97, 99, 110, 112, 123, 138, 216, 221, 226, 232, 1,
		6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// CESQLParserLexerInit initializes any static state used to implement CESQLParserLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewCESQLParserLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func CESQLParserLexerInit() {
	staticData := &cesqlparserlexerLexerStaticData
	staticData.once.Do(cesqlparserlexerLexerInit)
}

// NewCESQLParserLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewCESQLParserLexer(input antlr.CharStream) *CESQLParserLexer {
	CESQLParserLexerInit()
	l := new(CESQLParserLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &cesqlparserlexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.predictionContextCache)
	l.channelNames = staticData.channelNames
	l.modeNames = staticData.modeNames
	l.RuleNames = staticData.ruleNames
	l.LiteralNames = staticData.literalNames
	l.SymbolicNames = staticData.symbolicNames
	l.GrammarFileName = "CESQLParser.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// CESQLParserLexer tokens.
const (
	CESQLParserLexerSPACE                               = 1
	CESQLParserLexerLR_BRACKET                          = 2
	CESQLParserLexerRR_BRACKET                          = 3
	CESQLParserLexerCOMMA                               = 4
	CESQLParserLexerSINGLE_QUOTE_SYMB                   = 5
	CESQLParserLexerDOUBLE_QUOTE_SYMB                   = 6
	CESQLParserLexerAND                                 = 7
	CESQLParserLexerOR                                  = 8
	CESQLParserLexerXOR                                 = 9
	CESQLParserLexerNOT                                 = 10
	CESQLParserLexerSTAR                                = 11
	CESQLParserLexerDIVIDE                              = 12
	CESQLParserLexerMODULE                              = 13
	CESQLParserLexerPLUS                                = 14
	CESQLParserLexerMINUS                               = 15
	CESQLParserLexerEQUAL                               = 16
	CESQLParserLexerNOT_EQUAL                           = 17
	CESQLParserLexerGREATER                             = 18
	CESQLParserLexerGREATER_OR_EQUAL                    = 19
	CESQLParserLexerLESS                                = 20
	CESQLParserLexerLESS_GREATER                        = 21
	CESQLParserLexerLESS_OR_EQUAL                       = 22
	CESQLParserLexerLIKE                                = 23
	CESQLParserLexerEXISTS                              = 24
	CESQLParserLexerIN                                  = 25
	CESQLParserLexerTRUE                                = 26
	CESQLParserLexerFALSE                               = 27
	CESQLParserLexerDQUOTED_STRING_LITERAL              = 28
	CESQLParserLexerSQUOTED_STRING_LITERAL              = 29
	CESQLParserLexerINTEGER_LITERAL                     = 30
	CESQLParserLexerIDENTIFIER                          = 31
	CESQLParserLexerIDENTIFIER_WITH_NUMBER              = 32
	CESQLParserLexerDATA_IDENTIFIER                     = 33
	CESQLParserLexerFUNCTION_IDENTIFIER_WITH_UNDERSCORE = 34
)
